// Content script –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ hh.ru
class HHContentScript {
  constructor() {
    this.initialize();
  }

  initialize() {
    console.log('HH.ru Auto Responder content script –∑–∞–ø—É—â–µ–Ω');
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –æ—Ç–∫–ª–∏–∫–∞
    this.observeDOMChanges();
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    this.checkForResponseForm();
  }

  observeDOMChanges() {
    const observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.addedNodes.length > 0) {
          this.checkForResponseForm();
        }
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }

  checkForResponseForm() {
    // –ò—â–µ–º –ø–æ–ª–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ hh.ru
    // –ù–∞ hh.ru –ø–æ–ª–µ –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç data-qa –∏–ª–∏ –∫–ª–∞—Å—Å—ã
    const coverLetterSelectors = [
      'textarea[data-qa="vacancy-response-popup-form-letter-input"]',
      'textarea[data-qa*="letter"]',
      'textarea[name*="letter"]',
      '.bloko-textarea',
      'textarea.bloko-textarea'
    ];

    for (const selector of coverLetterSelectors) {
      const textareas = document.querySelectorAll(selector);
      for (const textarea of textareas) {
        if (this.isCoverLetterField(textarea)) {
          this.addAutoFillButton(textarea);
        }
      }
    }
  }

  isCoverLetterField(textarea) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–ª–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º
    const parent = textarea.closest('form, .modal, .popup');
    if (!parent) return false;

    const context = parent.textContent.toLowerCase();
    const isResponseForm = context.includes('–æ—Ç–∫–ª–∏–∫') || 
                          context.includes('response') ||
                          context.includes('—Å–æ–ø—Ä–æ–≤–æ–¥') ||
                          context.includes('–ø–∏—Å—å–º');

    return isResponseForm && textarea.offsetHeight > 50;
  }

  addAutoFillButton(textarea) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
    if (textarea.previousElementSibling?.classList?.contains('autofill-button-container')) {
      return;
    }

    const container = document.createElement('div');
    container.className = 'autofill-button-container';
    container.style.marginBottom = '10px';
    container.style.display = 'flex';
    container.style.justifyContent = 'flex-end';

    const button = document.createElement('button');
    button.textContent = 'ü™Ñ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ';
    button.className = 'autofill-button';
    button.style.padding = '8px 16px';
    button.style.background = '#4285f4';
    button.style.color = 'white';
    button.style.border = 'none';
    button.style.borderRadius = '4px';
    button.style.cursor = 'pointer';
    button.style.fontSize = '14px';
    
    button.addEventListener('click', () => this.handleAutoFill(textarea));

    container.appendChild(button);
    textarea.parentNode.insertBefore(container, textarea);
  }

  async handleAutoFill(textarea) {
    const button = textarea.previousElementSibling.querySelector('button');
    const originalText = button.textContent;
    
    button.textContent = '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...';
    button.disabled = true;
    button.style.background = '#ccc';

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏
      const vacancyInfo = this.extractVacancyInfo();
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = await this.getSettings();
      
      if (!settings.apiKey) {
        throw new Error('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏');
      }

      if (!settings.resume) {
        throw new Error('–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
      const coverLetter = await this.generateCoverLetter({
        resume: settings.resume,
        vacancyInfo,
        userPrompt: settings.userPrompt,
        exampleLetter: settings.exampleLetter,
        language: settings.language
      });

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
      textarea.value = coverLetter;
      
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
      textarea.dispatchEvent(new Event('input', { bubbles: true }));
      textarea.dispatchEvent(new Event('change', { bubbles: true }));

      this.showNotification('–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      this.showNotification(error.message, 'error');
    } finally {
      button.textContent = originalText;
      button.disabled = false;
      button.style.background = '#4285f4';
    }
  }

  extractVacancyInfo() {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let vacancyInfo = '';

    // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const titleSelectors = [
      '[data-qa="vacancy-title"]',
      '.vacancy-title',
      'h1[data-qa*="title"]',
      '.bloko-header-1'
    ];
    
    const title = this.findText(titleSelectors);
    if (title) vacancyInfo += `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${title}\n`;

    // –ö–æ–º–ø–∞–Ω–∏—è
    const companySelectors = [
      '[data-qa="vacancy-company-name"]',
      '.vacancy-company-name',
      '[class*="company"]'
    ];
    
    const company = this.findText(companySelectors);
    if (company) vacancyInfo += `–ö–æ–º–ø–∞–Ω–∏—è: ${company}\n`;

    // –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const descriptionSelectors = [
      '[data-qa="vacancy-description"]',
      '.vacancy-description',
      '.bloko-text'
    ];
    
    const description = this.findText(descriptionSelectors);
    if (description) vacancyInfo += `–û–ø–∏—Å–∞–Ω–∏–µ:\n${description}\n`;

    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const requirementsSelectors = [
      '[data-qa*="requirement"]',
      '[data-qa*="skill"]',
      '.vacancy-section'
    ];
    
    const requirements = this.findText(requirementsSelectors);
    if (requirements) vacancyInfo += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n${requirements}\n`;

    return vacancyInfo || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
  }

  findText(selectors) {
    for (const selector of selectors) {
      const element = document.querySelector(selector);
      if (element && element.textContent.trim()) {
        return element.textContent.trim();
      }
    }
    return null;
  }

  async generateCoverLetter(data) {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage({
        action: 'generateCoverLetter',
        data
      }, (response) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else if (response && response.success) {
          resolve(response.data);
        } else {
          reject(new Error(response?.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
        }
      });
    });
  }

  async getSettings() {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage({
        action: 'getSettings'
      }, (response) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else if (response && response.success) {
          resolve(response.data || {});
        } else {
          reject(new Error(response?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'));
        }
      });
    });
  }

  showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.padding = '12px 20px';
    notification.style.borderRadius = '4px';
    notification.style.zIndex = '10000';
    notification.style.fontSize = '14px';
    notification.style.fontWeight = '500';

    if (type === 'success') {
      notification.style.background = '#4caf50';
      notification.style.color = 'white';
    } else if (type === 'error') {
      notification.style.background = '#f44336';
      notification.style.color = 'white';
    } else {
      notification.style.background = '#2196f3';
      notification.style.color = 'white';
    }

    document.body.appendChild(notification);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
new HHContentScript();
